/*
 * base_socket_win32.cpp
 *         Created on: 2012-10-17
 *			   Author: qianqians
 * base_socket_win32й╣ож
 */
#ifdef _WIN32

#include <sstream>
#include <string>
#include <angelica/detail/tools.h>

#include "iocp_impl.h"
#include "base_socket_win32.h"
#include "Overlapped.h"

#include "../simple_pool.h"
#include "../socket.h"
#include "../sock_addr.h"
#include "../sock_buff.h"

namespace angelica {
namespace async_net {
namespace win32 {

namespace detail {

typedef angelica::async_net::detail::simple_pool<unsigned int> sock_pool;
static sock_pool _pool;

SOCKET Getfd(){
	SOCKET fd = (SOCKET)_pool.get();
	if (fd == 0){
		fd = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, 0, 0, WSA_FLAG_OVERLAPPED);
	}

	return fd;
}

void Releasefd(SOCKET fd){
	if (_pool.size() > 1024){
		closesocket(fd);
	}else{
		_pool.release((unsigned int *)fd);
	}
}
	
} //detail

base_socket_win32::base_socket_win32(iocp_impl & _impl) : impl(&_impl) {
	fd = detail::Getfd();
	CreateIoCompletionPort((HANDLE)fd, _impl.hIOCP, (ULONG_PTR)this, 0);
}

base_socket_win32::base_socket_win32() : fd(0), impl(0){
}

base_socket_win32::~base_socket_win32(){
}

void base_socket_win32::bind(sock_addr addr){
	sockaddr_in service;
	memset(&service, 0, sizeof(sockaddr_in));
	service.sin_family = AF_INET;
	service.sin_addr = addr.sin_addr;
	service.sin_port = addr._port;

	int ret = ::bind(fd, (SOCKADDR*)&service, sizeof(service));
	if (ret == SOCKET_ERROR){
		std::stringstream error_buff;  
		error_buff << "bind failed. Error" << GetLastError();
		std::string error_info;
		error_buff >> error_info;
		throw boost::throw_function(error_info.c_str());
	}

	int nZero = 0;
	setsockopt(fd, SOL_SOCKET, SO_SNDBUF, (char *)nZero, sizeof(nZero));
}

void base_socket_win32::do_async_accpet(){
	DWORD dwBytes;
	SOCKET _clientfd = detail::Getfd();
	async_net::detail::read_buff * _read_buff = async_net::detail::GetReadBuff();
	OverlappedEX * olp = detail::GetOverlapped();
	olp->fn_onHandle = boost::bind(&base_socket_win32::OnAccept, this, _read_buff, _clientfd, _1, _2);

	if (!AcceptEx(fd, 
				  _clientfd, 
			 	  _read_buff->buff, 
				  0, 
				  sizeof(sockaddr_in) + 16, 
				  sizeof(sockaddr_in) + 16, 
				  &dwBytes, 
				  &olp->overlap)){
		DWORD err = WSAGetLastError();

		if (err != ERROR_IO_PENDING){
			socket * s = container_of(this, socket, fd);
			s->fn_onError(err);
		}
	}
}

void base_socket_win32::start_accpet(){
	SYSTEM_INFO info;
	GetSystemInfo(&info);
	if (listen(fd, 100) == SOCKET_ERROR) {
		socket * s = container_of(this, socket, fd);
		printf("error listening\n");

		DWORD err = WSAGetLastError();
		s->fn_onError(err);
	} 

	for(DWORD i = 0; i < info.dwNumberOfProcessors; i++){
		do_async_accpet();
	}
}

void base_socket_win32::OnAccept(async_net::detail::read_buff * _buf, SOCKET _fd, DWORD llen, _error_code err) {
	socket * sListen = container_of(this, socket, fd);

	if (err){
		sListen->fn_onError(err);	
	}else{
		LPSOCKADDR local_addr = 0;
		int local_addr_length = 0;
		LPSOCKADDR remote_addr = 0;
		int remote_addr_length = 0;
		GetAcceptExSockaddrs(
			_buf->buff, 
			llen, 
			sizeof(sockaddr_in) + 16, 
			sizeof(sockaddr_in) + 16, 
			&local_addr,
			&local_addr_length,
			&remote_addr,
			&remote_addr_length);
	
		if (remote_addr_length > sizeof(sockaddr_in) + 16) {
			sListen->fn_onError(err);
		}else{
			if ((sListen->nConnect++ < sListen->nMaxConnect) && sListen->isaccept){
				sListen->fd.do_async_accpet();
			}

			if (llen > 0){
				_buf->slide += llen;
			}

			setsockopt(_fd, SOL_SOCKET, SO_UPDATE_ACCEPT_CONTEXT, (char *)(sListen->fd.fd), sizeof(sListen->fd.fd));
			CreateIoCompletionPort((HANDLE)_fd, sListen->fd.impl, (ULONG_PTR)this, 0);

			socket sClient;
			sClient.fd.fd = _fd;
			sClient.fd.impl = impl;
			sClient._read_buff = _buf;
			sClient._service = sListen->_service;
			sClient.isdisconnect = false;
			sListen->fn_onAccpet(sClient, sock_addr(remote_addr), sListen->nConnect.load());
		}
	}
}

void base_socket_win32::start_recv() {
	socket * s = container_of(this, socket, fd);
	
	if (s->_read_buff->slide > 0){
		s->fn_onRecv(s->_read_buff->buff, s->_read_buff->slide);
		s->_read_buff->slide = 0;
	}

	do_async_recv();
}

void base_socket_win32::do_async_recv(){
	socket * s = container_of(this, socket, fd);
	
	DWORD flag = 0;
	DWORD llen = 0;
	
	OverlappedEX * ovl = detail::GetOverlapped();
	ovl->fn_onHandle = boost::bind(&base_socket_win32::OnRecv, this, _1, _2);
	
	s->_read_buff->_wsabuf.buf = s->_read_buff->buff;
	s->_read_buff->_wsabuf.len = s->_read_buff->buff_size;
	if (WSARecv(this->fd, &s->_read_buff->_wsabuf, 1, &llen, &flag, &ovl->overlap, 0) == SOCKET_ERROR){
		DWORD err = WSAGetLastError();
		if (err != WSA_IO_PENDING){
			s->fn_onError(err);
		}
	}
}

void base_socket_win32::OnRecv(DWORD llen, _error_code err) { 
	socket * s = container_of(this, socket, fd);

	if (err){
		s->fn_onError(err);
	}else{
		s->_read_buff->slide += llen;
		if (s->isrecv){
			s->fn_onRecv(s->_read_buff->buff, s->_read_buff->slide);
			s->_read_buff->slide = 0;

			do_async_recv();
		}else{
			s->_read_buff->fn_Release();
		}
	}
}

void base_socket_win32::async_send(){
	socket * s = container_of(this, socket, fd);

	async_net::detail::simple_buff * _buf = s->_write_buff->send_buff();
	if (_buf){
		s->_write_buff->_wsabuf.buf = _buf->buff;
		s->_write_buff->_wsabuf.len = _buf->slide;
	
		do_async_send(_buf);
	}
}

void base_socket_win32::do_async_send(async_net::detail::simple_buff * _buf){
	socket * s = container_of(this, socket, fd);

	DWORD flag = 0;
	DWORD llen = 0;

	OverlappedEX * ovl = detail::GetOverlapped();
	ovl->fn_onHandle = boost::bind(&base_socket_win32::OnSend, this, _buf, _1, _2);
		
	if (WSASend(this->fd, &s->_write_buff->_wsabuf, 1, &llen, flag, &ovl->overlap, 0) == SOCKET_ERROR){
		DWORD err = WSAGetLastError();
		if (err != WSA_IO_PENDING){
			s->fn_onError(err);
		}
	}
}

void base_socket_win32::OnSend(async_net::detail::simple_buff * buf, DWORD llen, _error_code err){
	socket * s = container_of(this, socket, fd);
	
	if (err){
		s->fn_onError(err);
	}else{
		if (s->_write_buff->_wsabuf.len > llen){
			s->_write_buff->_wsabuf.buf = s->_write_buff->_wsabuf.buf + llen;
			s->_write_buff->_wsabuf.len = s->_write_buff->_wsabuf.len - llen;

			do_async_send(buf);
		}else{
			s->_write_buff->clear(buf);

			async_net::detail::simple_buff * _buf = s->_write_buff->send_buff();
			if (_buf){
				s->_write_buff->_wsabuf.buf = _buf->buff;
				s->_write_buff->_wsabuf.len = _buf->slide;
		
				do_async_send(_buf);
			}
		}
	}
}

void base_socket_win32::async_connect(sock_addr addr){
	sockaddr_in service;
	memset(&service, 0, sizeof(sockaddr_in));
	service.sin_family = AF_INET;
	service.sin_addr = addr.sin_addr;
	service.sin_port = addr._port;
	
	DWORD llen = 0;
	
	OverlappedEX * ovl = detail::GetOverlapped();
	ovl->fn_onHandle = boost::bind(&base_socket_win32::OnConnect, this, _1, _2);
	
	DWORD dwBytes;
	GUID GuidConnectEx = WSAID_CONNECTEX;
	LPFN_CONNECTEX fn_CONNECTEX;
	WSAIoctl(
		fd, 
		SIO_GET_EXTENSION_FUNCTION_POINTER, 
		&GuidConnectEx, 
		sizeof(GuidConnectEx),
		&fn_CONNECTEX, 
		sizeof(fn_CONNECTEX), 
		&dwBytes, 
		NULL, 
		NULL);

	if (!fn_CONNECTEX(fd, (sockaddr *)&service, sizeof(sockaddr), 0, 0, &llen, &ovl->overlap)){
		DWORD err = WSAGetLastError();
		if (err != ERROR_IO_PENDING){
			socket * s = container_of(this, socket, fd);
			s->fn_onError(err);
		}
	}
}

void base_socket_win32::OnConnect(DWORD llen, _error_code err) {
	socket * s = container_of(this, socket, fd);

	if (err){
		s->fn_onError(err);
	}else{
		setsockopt(fd, SOL_SOCKET, SO_UPDATE_CONNECT_CONTEXT, NULL, 0);
		s->isdisconnect = false;
		s->fn_onConnect();
	}
}

void base_socket_win32::disconnect(){
	CancelIo((HANDLE)fd);

	OverlappedEX * ovl = detail::GetOverlapped();
	ovl->fn_onHandle = boost::bind(&base_socket_win32::onDeconnect, this, _1, _2);
	
	do_disconnect(&ovl->overlap);
}

void base_socket_win32::onDeconnect(DWORD llen, _error_code err){
	socket * s = container_of(this, socket, fd);

	if (err){
		s->fn_onError(err);
	}else{
		if (s->isdisconnect) {
			s->isrecv = false;
			s->isaccept = false;
		}else{
			s->fn_onError(error_close);
		}
	}
}

void base_socket_win32::do_disconnect(LPOVERLAPPED povld){
	DWORD dwBytes;
	GUID GuidDisconnectEx = WSAID_DISCONNECTEX;
	LPFN_DISCONNECTEX fn_DISCONNECTEX;
	
	WSAIoctl(
		fd, 
		SIO_GET_EXTENSION_FUNCTION_POINTER, 
		&GuidDisconnectEx, 
		sizeof(GuidDisconnectEx),
		&fn_DISCONNECTEX, 
		sizeof(fn_DISCONNECTEX), 
		&dwBytes, 
		NULL, 
		NULL);

	if (!fn_DISCONNECTEX(fd, povld, TF_REUSE_SOCKET, 0)){
		DWORD err = WSAGetLastError();
		if (err != ERROR_IO_PENDING){
			socket * s = container_of(this, socket, fd);
			s->fn_onError(err);
		}
	}
}

void base_socket_win32::closesocket(){
	socket * s = container_of(this, socket, fd);

	if (s->isdisconnect){
		onClose(0, 0);
	}else{
		CancelIo((HANDLE)fd);

		OverlappedEX * ovl = detail::GetOverlapped();
		ovl->fn_onHandle = boost::bind(&base_socket_win32::onClose, this, _1, _2);
	
		do_disconnect(&ovl->overlap);
	}
}

void base_socket_win32::onClose(DWORD llen, _error_code err){
	if (err){
		socket * s = container_of(this, socket, fd);
		s->fn_onError(err);
	}
	detail::Releasefd(fd);
}

void base_socket_win32::err_close(){
	CancelIo((HANDLE)fd);
	detail::Releasefd(fd);
}

} //win32
} //async_net
} //angelica

#endif //_WIN32